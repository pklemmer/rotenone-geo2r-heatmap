#Loading generated GEO2R data sets
View(xp1)
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp4 <- read_delim("expression/15_dmso_vs_15_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp5<- read_delim("expression/15_dmso_vs_15_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp6 <- read_delim("expression/15_dmso_vs_15_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
library(readr)
xp1 <- read_delim("expression/8_dmso_vs_8_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp2 <- read_delim("expression/8_dmso_vs_8_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp3 <- read_delim("expression/8_dmso_vs_8_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp4 <- read_delim("expression/15_dmso_vs_15_rot50_12.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp5<- read_delim("expression/15_dmso_vs_15_rot50_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
xp6 <- read_delim("expression/15_dmso_vs_15_rot100_24.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#Loading generated GEO2R data sets
View(xp1)
master <- cbind(xp1, xp2, xp3, xp4, xp5, xp6)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by = "GENE_SYMBOL")
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by = "GENE_SYMBOL", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by = "ID", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by = "GENE_SYMBOL", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by="GENE_SYMBOL", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by.x="GENE_SYMBOL", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by.y ="GENE_SYMBOL", all = T)
master <- merge(xp1, xp2, xp3, xp4, xp5, xp6, by =GENE_SYMBOL, all = T)
logFCxp <- cbind(xp1[,logFC], xp2[,logFC], xp3[,logFC], xp4[,logFC], xp5[,logFC], xp6[,logFC])
logFCxp <- cbind(xp1[,"logFC"], xp2[,logFC], xp3[,logFC], xp4[,logFC], xp5[,logFC], xp6[,logFC])
logFCxp <- cbind(xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
#Loading generated GEO2R data sets
install.packages(gdata)
#Loading generated GEO2R data sets
install.packages("gdata")
library(gdata)
logFCxp <- cbindX(xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
View(logFCxp)
logFCxp <- cbindX(xp1[,"logFC"], xp1[,"GENE_SYMBOL", xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
logFCxp <- cbindX(xp1[,"logFC"], xp1[,"GENE_SYMBOL"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
View(logFCxp)
logFCxp <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
View(logFCxp)
library(dplyr)
library(dplyr)
rename(logFCxp,
xp1 = logFC,
xp2 = logFC,
xp3 = logFC,
xp4 = logFC,
xp5 = logFC,
xp6 = logFC
)
colnames(logFCxp) <- c("Gene symbol", "xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
View(logFCxp)
#Creating a df containing gene symbols and the logFC of all samples
heatmap(logFCxp)
class(logFCxp)
?heatmap
#Creating a df containing gene symbols and the logFC of all samples
logFCxp <- cbindX(xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
colnames(logFCxp) <- c("xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
logFCxp <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
colnames(logFCxp) <- c("Gene symbol", "xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
#Creating a df containing gene symbols and the logFC of all samples
logFCxp1 <- cbindX(xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
colnames(logFCxp) <- c("xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
View(logFCxp1)
colnames(logFCxp) <- c("Gene symbol", "xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
colnames(logFCxp1) <- c("xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
View(logFCxp1)
class(logFCxp1)
data.matrix(logFCxp1)
matrix <- data.matrix(logFCxp1)
View(matrix)
heatmap(matrix)
#Creating a df containing gene symbols and the logFC of all samples
rownames(logFCxp) <- logFCxp$`Gene symbol`
logFCxp_matrix <- as.matrix(logFCxp[2:6])
head(logFCxp_matrix)
View(logFCxp_matrix)
logFCxp_matrix <- as.matrix(logFCxp)
View(logFCxp_matrix)
class(logFCxp_matrix)
heatmap(logFCxp_matrix)
logFCxp_matrix <- as.matrix(logFCxp[2:6])
View(logFCxp_matrix)
logFCxp_matrix <- as.matrix(logFCxp[2:7])
View(logFCxp_matrix)
rownames(logFCxp) <- logFCxp$Gene symbol
rownames(logFCxp) <- logFCxp$"Gene symbol"
rownames(logFCxp) <- xp2[,"GENE_SYMBOL"]
rownames(logFCxp) <- logFCxp$`Gene symbol`
logFCxp_matrix <- as.matrix(logFCxp[2:7])
rownames(logFCxp) <- logFCxp$`Gene symbol`
rownames(logFCxp) <- make.names(logFCxp[,1], unique = TRUE)
logFCxp_matrix <- as.matrix(logFCxp[2:7])
View(logFCxp_matrix)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
logFCxp <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
rownames(logFCxp) <- make.names(logFCxp[,1], unique = TRUE)
logFCxp_matrix <- as.matrix(logFCxp[2:7])
#Heatmap functions require matrix input, the previous 2 lines convert the df to a matrix with the gene names as row names
View(logFCxp_matrix)
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
logFCxp <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
colnames(logFCxp) <- c("Gene symbol", "xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
rownames(logFCxp) <- make.names(logFCxp[,1], unique = TRUE)
logFCxp_matrix <- as.matrix(logFCxp[2:7])
#gdata has the cbindX function, allowing cbind with differing number of rows (rows are extended and filled with NA)
df <- cbindX( xp1[,"GENE_SYMBOL"],xp1[,"logFC"], xp2[,"logFC"], xp3[,"logFC"], xp4[,"logFC"], xp5[,"logFC"], xp6[,"logFC"])
colnames(df) <- c("Gene symbol", "xp1", "xp2", "xp3", "xp4", "xp5", "xp6")
rownames(df) <- make.names(df[,1], unique = TRUE)
xpmatrix <- as.matrix(df[2:7])
#Heatmap functions require matrix input, the previous 2 lines convert the df to a matrix with the gene names as row names
View(xpmatrix)
#Heatmap functions require matrix input, the previous 2 lines convert the df to a matrix with the gene names as row names
heatmap(xpmatrix, Rowv=NA, Colv=NA)
